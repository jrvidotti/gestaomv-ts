#!/usr/bin/env tsx

/**
 * Script principal para executar opera√ß√µes de seed (exporta√ß√£o e importa√ß√£o)
 *
 * Uso:
 * - Exportar: tsx exec-seed.ts export
 * - Importar: tsx exec-seed.ts import
 */

import { join } from 'path';
import importExportUsers from '../server/database/import-export/users';
import importExportEmpresas from '../server/database/import-export/empresas';
import importExportUnidades from '../server/database/import-export/unidades';
import importExportDepartamentos from '../server/database/import-export/departamentos';
import importExportEquipes from '../server/database/import-export/equipes';
import importExportCargos from '../server/database/import-export/cargos';
import importExportMateriais from '../server/database/import-export/materiais';
import importExportTiposMaterial from '../server/database/import-export/tipos-material';
import importExportUnidadesMedida from '../server/database/import-export/unidades-medida';
import importExportConsultasCpf from '../server/database/import-export/consultas-cpf';

// Configura√ß√£o dos m√≥dulos e ordem de execu√ß√£o
const modulos = [
  { nome: 'users', modulo: importExportUsers, arquivo: 'users.json' },
  { nome: 'tipos-material', modulo: importExportTiposMaterial, arquivo: 'tipos-material.json' },
  { nome: 'unidades-medida', modulo: importExportUnidadesMedida, arquivo: 'unidades-medida.json' },
  { nome: 'empresas', modulo: importExportEmpresas, arquivo: 'empresas.json' },
  { nome: 'unidades', modulo: importExportUnidades, arquivo: 'unidades.json' },
  { nome: 'departamentos', modulo: importExportDepartamentos, arquivo: 'departamentos.json' },
  { nome: 'equipes', modulo: importExportEquipes, arquivo: 'equipes.json' },
  { nome: 'cargos', modulo: importExportCargos, arquivo: 'cargos.json' },
  { nome: 'materiais', modulo: importExportMateriais, arquivo: 'materiais.json' },
  { nome: 'consultas-cpf', modulo: importExportConsultasCpf, arquivo: 'consultas-cpf.json' },
];

const PASTA_DADOS = join(process.cwd(), 'drizzle', 'data');

export async function exportarDados() {
  console.log('üöÄ Iniciando exporta√ß√£o dos dados para seed...\n');

  let totalExportados = 0;

  for (const { nome, modulo, arquivo } of modulos) {
    try {
      console.log(`üìä Exportando ${nome}...`);
      const caminhoArquivo = join(PASTA_DADOS, arquivo);
      const resultado = await modulo.exportar(caminhoArquivo);

      console.log(`‚úÖ ${nome}: ${resultado.exportados} registros exportados`);
      totalExportados += resultado.exportados;
    } catch (error) {
      console.error(`‚ùå Erro ao exportar ${nome}:`, error);
    }
  }

  console.log(`\n‚úÖ Exporta√ß√£o conclu√≠da com sucesso!`);
  console.log(`üìÅ Total de registros exportados: ${totalExportados}`);
  console.log(`üìÇ Arquivos salvos em: ${PASTA_DADOS}`);
}

export async function importarDados() {
  console.log('üöÄ Iniciando importa√ß√£o dos dados de seed...\n');

  const relatorios = [];

  for (const { nome, modulo, arquivo } of modulos) {
    try {
      console.log(`üì• Importando ${nome}...`);
      const caminhoArquivo = join(PASTA_DADOS, arquivo);
      const relatorio = await modulo.importar(caminhoArquivo);

      console.log(`üìä Relat√≥rio - ${nome}:`);
      console.log(`   ‚úÖ Importados: ${relatorio.importados}`);
      console.log(`   ‚è≠Ô∏è  Ignorados: ${relatorio.ignorados}`);
      console.log(`   ‚ùå Erros: ${relatorio.erros}\n`);

      relatorios.push(relatorio);
    } catch (error) {
      console.error(`‚ùå Erro ao importar ${nome}:`, error);
      relatorios.push({ importados: 0, ignorados: 0, erros: 1 });
    }
  }

  // Relat√≥rio geral
  console.log('üìä Relat√≥rio Geral de Importa√ß√£o:');
  const totalImportados = relatorios.reduce((acc, rel) => acc + rel.importados, 0);
  const totalIgnorados = relatorios.reduce((acc, rel) => acc + rel.ignorados, 0);
  const totalErros = relatorios.reduce((acc, rel) => acc + rel.erros, 0);

  console.log(`   ‚úÖ Total importados: ${totalImportados}`);
  console.log(`   ‚è≠Ô∏è  Total ignorados: ${totalIgnorados}`);
  console.log(`   ‚ùå Total erros: ${totalErros}`);

  if (totalErros === 0) {
    console.log('\n‚úÖ Importa√ß√£o conclu√≠da com sucesso!');
  } else {
    console.log('\n‚ö†Ô∏è Importa√ß√£o conclu√≠da com ressalvas. Verifique os erros acima.');
  }
}

async function main() {
  const operacao = process.argv[2];

  if (!operacao || !['export', 'import'].includes(operacao)) {
    console.log('‚ùå Opera√ß√£o inv√°lida!');
    console.log('\nUso:');
    console.log('  tsx exec-seed.ts export  # Exportar dados do banco para arquivos JSON');
    console.log('  tsx exec-seed.ts import  # Importar dados dos arquivos JSON para o banco');
    process.exit(1);
  }

  try {
    if (operacao === 'export') {
      await exportarDados();
    } else {
      await importarDados();
    }

    process.exit(0);
  } catch (error) {
    console.error('üí• Erro durante a opera√ß√£o:', error);
    process.exit(1);
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main();
}
